#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::templates;
use esmith::ConfigDB;
use File::Temp;
use File::Copy;
use File::Basename;
use File::Glob;
use Cwd;

my $event = shift;
my $errors = 0;
my $sourceDir = '/usr/share/nethserver/sogo-frontends';
my $destDir = '/var/lib/nethserver/sogo-thunderbird';
my $configDb = esmith::ConfigDB->open_ro() || die('Could not open ConfigDB');

my $defaultUpdateUrl = 'http://' . 
    join('.', $configDb->get_value('SystemName'), $configDb->get_value('DomainName')) . 
    '/sogo-thunderbird/updates.php?' . 
    join('&amp;', qw(
    	 plugin=%ITEM_ID%
	 version=%ITEM_VERSION%
	 platform=%PLATFORM%
    ));

# updateURL is passed to patch templates:
my $updateURL = $configDb->get_prop('sogotb', 'ThunderbirdUpdateUrl') || $defaultUpdateUrl;

my $packages = {};

my @fieldHeaders = (
    'file',
    'pluginid',
    'version',
    'platform',
    'appmatch',
    'appminver',
    'appmaxver'
    );


# Delete any sogo-integrator xpi package in $destDir:
unlink $_ foreach(File::Glob::glob($destDir . '/sogo-integrator-*.xpi'));

#
# Parse any MANIFEST file to extract integrator XPI metadata:
#
foreach (File::Glob::glob($sourceDir . '/MANIFEST-*.tsv')) {

    open(FH, '<', $_);

    while(my $line = <FH>) {
	chomp($line);

	# Skip comment lines:
	if($line =~ /^#/) {
	    next;
	}

	my %row;

	@row{@fieldHeaders} = split("\t", $line);

	# Calculate source file absolute path:
	$row{'source'} = $sourceDir . '/' . $row{'file'};
	
	#
	# Add xpi to $packages only if refers to Integrator
	# plugin and the source file actually exists.
	#
	if ($row{'pluginid'} eq 'sogo-integrator@inverse.ca' 
	    && -f $row{'source'} ) {	   

	    # Calculate output file absolute path:
	    $row{'output'} = $destDir . '/sogo-integrator-' . $row{'version'} . '.xpi';

	    # Calculate patch file absolute path:
	    $row{'patch'} = 'sogo-frontends/' . $row{'file'} . '.patch';

	    $packages->{$row{'file'}} = \%row;
	}
    }

    close(FH);
}


foreach my $xpiFile (keys %{$packages}) {

    # Create the temporary directory $workDir:
    my $workDir = File::Temp->newdir(
	'/var/tmp/sogo-integrator.XXXXXXXX', 
	CLEANUP => 0)->dirname;

    my %item = %{$packages->{$xpiFile}};

    # Instantiate the patch template:
    my $patch = esmith::templates::processTemplate({
	TEMPLATE_PATH => $item{'patch'},
	OUTPUT_TYPE => 'string',
	MORE_DATA => {
	    updateURL => $updateURL
	}
    });

    # If an empty patch is returned warn and skip to next XPI file:
    if( ! $patch) {
	warn "Empty patch returned for $xpiFile archive.\n";
	$errors ++;
	next;
    }

    # Decompress source xpi to the temporary $workDir:
    system('/usr/bin/unzip', '-qq', '-d', $workDir, $item{'source'});

    if( $? != 0 ) {
	warn "Failed to unzip $xpiFile properly!\n";
	$errors ++;
	next;
    }

    # Apply the patch:
    open(PH, '|-', '/usr/bin/patch -p1 -s -d ' . $workDir);
    print PH $patch;	
    if( ! close(PH)) {
	warn "Failed to apply patch to $xpiFile archive.\n";
	$errors ++;
	next;
    }
    	       
    # Change to temporary directory and create the output archive
    chdir $workDir;          
    system('/usr/bin/zip', '-qr', $item{'output'}, '.');
    if( $? != 0 ) {
	warn "Failed to zip $xpiFile properly!\n";
	$errors ++;
	next;
    }

}


exit ($errors == 0 ? 0 : 1);
