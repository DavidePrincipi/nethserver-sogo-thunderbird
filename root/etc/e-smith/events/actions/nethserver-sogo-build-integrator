#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::templates;
use File::Temp;
use File::Copy;
use File::Basename;
use File::Glob;
use Cwd;

my $event = shift;
my $errors = 0;
my $sourceDir = '/usr/share/nethserver/sogo-frontends';
my $destDir = '/var/lib/nethserver/sogo-thunderbird';

my $packages = {};

# Delete any sogo-integrator xpi package in $destDir:
unlink $_ foreach(File::Glob::glob($destDir . '/sogo-integrator-*.xpi'));

foreach (File::Glob::glob($sourceDir . '/sogo-integrator-*.xpi')) {

    my $xpiFile = File::Basename::basename($_);

    # $1 is the major version number
    $xpiFile =~ /^sogo-integrator-(\d+)/;

    if($1 >= 3) {
	$packages->{$xpiFile} = {
	    'source' => $_,
	    'majorVersion' => $1,
	    'templates' => {
		('extensions.rdf.tb' . $1) => 'chrome/content/extensions.rdf',
		('site.js.tb' . $1) => 'defaults/preferences/site.js',
	    }
	};
    }
}

foreach my $xpiFile (keys %{$packages}) {

    # Create the temporary directory $workDir:
    my $workDir = File::Temp->newdir(
	'/var/tmp/sogo-integrator.XXXXXXXX', 
	CLEANUP => 0)->dirname;

    my $source = $packages->{$xpiFile}->{'source'};
    my %outputTemplates = %{$packages->{$xpiFile}->{'templates'}};

    # Decompress source xpi to the temporary $workDir:
    system('/usr/bin/unzip', '-qq', '-d', $workDir, $source);

    if( $? != 0 ) {
	warn "Failed to unzip $xpiFile properly!\n";
	$errors ++;
	next;
    }

    # Expand templates:
    foreach my $templateName (keys %outputTemplates) {
	my $outputFile = $workDir . '/' . $outputTemplates{$templateName};
	
	if ( -f $outputFile ) {
	    esmith::templates::processTemplate({
		TEMPLATE_PATH => 'sogo-thunderbird/' . $templateName,
		OUTPUT_PREFIX => File::Basename::dirname($outputFile),
		OUTPUT_FILENAME => File::Basename::basename($outputFile)
	    });
	} else {
	    warn "Could not find $outputTemplates{$templateName} in $xpiFile archive\n";
	    $errors ++;
	}
		
    }

    # Create the target filename with majorVersion suffix:
    my $targetFile = join('/', $destDir, sprintf('sogo-integrator-%d.xpi', $packages->{$xpiFile}->{'majorVersion'}));
 
    # Change to temporary directory and create the $targetFile archive
    chdir $workDir;          
    system('/usr/bin/zip', '-qr', $targetFile, '.');
    if( $? != 0 ) {
	warn "Failed to zip $xpiFile properly!\n";
	$errors ++;
	next;
    }

    
}


exit ($errors == 0 ? 0 : 1);
